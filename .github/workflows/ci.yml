name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
      - name: Run ESLint
        run: npm run lint:check
      - name: Run Prettier check
        run: npm run format:check
      - name: Run TypeScript type check
        run: npm run type-check
      - name: Build application
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1
      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

  workspace-check:
    name: Workspace Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
      - name: Check workspace structure
        run: |
          if [ -d "packages" ]; then
            echo "Checking workspace packages..."
            npm run build --workspaces --if-present
          fi
      - name: Verify package integrity
        run: |
          npm audit --audit-level=moderate

  context7:
    name: Upsert Context7 Docs
    runs-on: ubuntu-latest
    needs: [test-and-build, workspace-check]
    # Only run on direct pushes (every new commit on master), not on PRs
    if: github.event_name == 'push'
    timeout-minutes: 45
    concurrency:
      group: context7-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4

      - name: Update Context7 Documentation
        id: context7
        uses: rennf93/upsert-context7@v1
        with:
          operation: refresh
          # library-name: "/owner/repo"   # optional; auto-detected
          # repo-url: "https://github.com/owner/repo"  # optional; auto-detected
          timeout: 1800  # 30 min default; bump if you have very large docs

      - name: Show result
        run: |
          echo "Success: ${{ steps.context7.outputs.success }}"
          echo "Status: ${{ steps.context7.outputs['status-code'] }}"
          echo "Message: ${{ steps.context7.outputs.message }}"

      # Make the workflow fail if the Context7 refresh failed
      - name: Fail if Context7 refresh failed
        if: steps.context7.outputs.success != 'true'
        run: |
          echo "::error::Context7 update failed: ${{ steps.context7.outputs.message }}"
          exit 1
